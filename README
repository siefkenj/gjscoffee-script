CoffeeScript makes javascript pleasurable to work with.  
gjsCoffeeScript adds some extensions to CoffeeScript to
assist in developing applications for gjs (gnome-javascript).

gjsCoffeeScript adds the following:

 * const keyword
 * import statements
 * gclass which uses Lang.Class for building classes
 * localbind as an alias for Lang.Bind(this, ...)


Features:
 Here is how gjscoffee compiles the new keywords.

 gjscoffee  > const Foo = bar

 javascript > const Foo = bar;

 
 gjscoffee  > import MyLib.foo as Foo

 javascript > const Foo = imports.MyLib.foo


 gjscoffee  > gclass Foo extends Bar
            >   constructor: -> @a=2
            >   meth1: -> return @a

 javascript > const Foo = new Lang.Class({
            >   Name: 'Foo',
            >   Extends: Bar,
            >   _init: function() {
            >     return this.a = 2;
            >   },
            >   meth1: function() {
            >     return this.a;
            >   }
            > });
 
 
 gjscoffee  > localbind foo

 javascript > Lang.Bind(this, foo);


Requirements:
 Requirements for gjsCoffeeScript are the same as for standard
 CoffeeScript, which, for the moment, means node.js.

  Install Node.js, and then the gjsCoffeeScript compiler:
  sudo bin/cake install


Getting Started:
  Execute a script:
  gjscoffee /path/to/script.coffee

  Compile a script:
  gjscoffee -c /path/to/script.coffee

  For documentation, usage, and examples, see:
  http://coffeescript.org/
